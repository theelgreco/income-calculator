import { z, type ZodError } from 'zod';
import { StandardSchemaV1 } from './standard-schema';
/**
 * The error class for standard schema validation errors.
 *
 * @see {@link StandardSchemaV1.FailureResult}
 */
export declare class StandardSchemaError extends Error implements StandardSchemaV1.FailureResult {
    readonly issues: readonly StandardSchemaV1.Issue[];
    constructor(issues: ReadonlyArray<StandardSchemaV1.Issue>);
    toString(): string;
}
export declare const validationErrorResponse: (error: ZodError | StandardSchemaError) => Pick<ZodError | StandardSchemaError, 'name' | 'issues'>;
/**
 * Schema was added in https://github.com/ts-rest/ts-rest/pull/601
 *
 * @deprecated supports zod 3, does not support other validators, you can bring your own schema, from next major version this will be removed
 */
export declare const RequestValidationErrorSchema: z.ZodObject<{
    message: z.ZodLiteral<"Request validation failed">;
    pathParameterErrors: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
    headerErrors: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
    queryParameterErrors: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
    bodyErrors: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
}, "strip", z.ZodTypeAny, {
    message: "Request validation failed";
    pathParameterErrors: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    headerErrors: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    queryParameterErrors: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    bodyErrors: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
}, {
    message: "Request validation failed";
    pathParameterErrors: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    headerErrors: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    queryParameterErrors: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    bodyErrors: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
}>;
/**
 * Schema was added in https://github.com/ts-rest/ts-rest/pull/601
 *
 * @deprecated supports zod 3, does not support other validators, you can bring your own schema, from next major version this will be removed
 */
export declare const RequestValidationErrorSchemaWithoutMessage: z.ZodObject<{
    pathParameterErrors: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
    headerErrors: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
    queryParameterErrors: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
    bodyErrors: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
}, "strip", z.ZodTypeAny, {
    pathParameterErrors: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    headerErrors: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    queryParameterErrors: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    bodyErrors: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
}, {
    pathParameterErrors: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    headerErrors: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    queryParameterErrors: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    bodyErrors: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
}>;
/**
 * Schema was added in https://github.com/ts-rest/ts-rest/pull/601
 *
 * @deprecated supports zod 3, does not support other validators, you can bring your own schema, from next major version this will be removed
 */
export declare const RequestValidationErrorSchemaForNest: z.ZodObject<{
    paramsResult: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
    headersResult: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
    queryResult: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
    bodyResult: z.ZodNullable<z.ZodObject<{
        name: z.ZodLiteral<"ZodError">;
        issues: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }, {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    }>>;
}, "strip", z.ZodTypeAny, {
    paramsResult: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    headersResult: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    queryResult: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    bodyResult: {
        name: "ZodError";
        issues: z.objectOutputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
}, {
    paramsResult: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    headersResult: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    queryResult: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
    bodyResult: {
        name: "ZodError";
        issues: z.objectInputType<{
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
            message: z.ZodOptional<z.ZodString>;
            code: z.ZodNativeEnum<{
                invalid_type: "invalid_type";
                invalid_literal: "invalid_literal";
                custom: "custom";
                invalid_union: "invalid_union";
                invalid_union_discriminator: "invalid_union_discriminator";
                invalid_enum_value: "invalid_enum_value";
                unrecognized_keys: "unrecognized_keys";
                invalid_arguments: "invalid_arguments";
                invalid_return_type: "invalid_return_type";
                invalid_date: "invalid_date";
                invalid_string: "invalid_string";
                too_small: "too_small";
                too_big: "too_big";
                invalid_intersection_types: "invalid_intersection_types";
                not_multiple_of: "not_multiple_of";
                not_finite: "not_finite";
            }>;
        }, z.ZodAny, "strip">[];
    } | null;
}>;
